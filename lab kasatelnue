#include <iostream>
#include <cmath>
#include <iomanip> // Для std::setprecision чтобы можно было его использоать

// Определение функции f(x)
double example_function(double x) {
    return pow(x, 3) - 0.2 * pow(x, 2) + 0.5 * x - 1;
}

// Определение производной функции f'(x)
double derivative_example_function(double x) {
    return 3 * pow(x, 2) - 0.4 * x + 0.5;
}

// Метод касательных (метод Ньютона)
std::pair<double, int> tangent_method(double (*f)(double), double (*df)(double), double x0, double epsilon, int max_iter) { //тангент метод возвращает пару значений (корень кол во итераций)
    double x = x0;
    for (int i = 0; i < max_iter; i++) {
        double f_x = f(x);
        double derivative = df(x);

        // Проверка на деление на ноль
        if (derivative == 0) { 
            return {NAN, i + 1}; 
        }

        double x_new = x - f_x / derivative; // Вычисление нового значения x

        // Проверка на сходимость
        if (fabs(x_new - x) < epsilon) { 
            return {x_new, i + 1}; 
        }
        x = x_new; // Обновление x
    }

    return {NAN, max_iter}; // Возвращаем NAN, если не нашли корень
}

int main() {
    double x0 = 1; // Начальное значение
    double epsilon = 1e-6; // Точность
    int max_iter = 100; // Максимальное количество итераций

    // Поиск корня
    auto [root, iterations] = tangent_method(example_function, derivative_example_function, x0, epsilon, max_iter); //самостоятельное определение типа переменной

    // Вывод результатов
    if (!std::isnan(root)) {
        std::cout << "Корень уравнения: " << std::fixed << std::setprecision(12) << root << std::endl;
        std::cout << "Количество итераций: " << iterations << std::endl;
        double fun = example_function(root);
        std::cout << "Значение функции: f(" << root << ") = " << fun << std::endl;
    } else {
        std::cout << "Корень не найден." << std::endl;
    }

    return 0;
}
